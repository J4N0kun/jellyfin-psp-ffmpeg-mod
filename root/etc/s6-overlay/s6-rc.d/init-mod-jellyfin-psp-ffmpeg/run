#!/usr/bin/with-contenv bash
# Docker Mod pour Jellyfin PSP - Wrapper FFmpeg Baseline Profile

echo "==================================================="
echo "PSP Jellyfin Mod: Installation wrapper FFmpeg"
echo "==================================================="

FFMPEG_ORIGINAL="/usr/lib/jellyfin-ffmpeg/ffmpeg.original"
FFMPEG_WRAPPER="/usr/lib/jellyfin-ffmpeg/ffmpeg"

# Vérifier si le wrapper est déjà installé
if [ -f "$FFMPEG_ORIGINAL" ]; then
    echo "→ Wrapper FFmpeg déjà installé ✅"
    exit 0
fi

# Renommer l'original FFmpeg
echo "→ Sauvegarde de l'original FFmpeg..."
mv "$FFMPEG_WRAPPER" "$FFMPEG_ORIGINAL"

# Créer le wrapper FFmpeg
echo "→ Création du wrapper FFmpeg PSP (VERSION DEBUG)..."
cat > "$FFMPEG_WRAPPER" << 'FFMPEG_WRAPPER'
#!/bin/bash
# Wrapper FFmpeg pour forcer H.264 Baseline Profile (PSP)
# VERSION DEBUG avec logs détaillés

LOGFILE="/tmp/ffmpeg-psp-wrapper.log"

# Logger la commande originale (seulement si c'est du H.264)
if echo "$@" | grep -q "libx264"; then
    echo "========================================" >> "$LOGFILE"
    echo "[$(date)] FFMPEG H.264 DÉTECTÉ" >> "$LOGFILE"
    echo "COMMANDE ORIGINALE:" >> "$LOGFILE"
    printf '%s\n' "$@" >> "$LOGFILE"
    echo "" >> "$LOGFILE"
fi

# Si ce n'est pas un transcodage H.264, passer tel quel
if ! echo "$@" | grep -q "libx264"; then
    exec /usr/lib/jellyfin-ffmpeg/ffmpeg.original "$@"
fi

# Parser les arguments et injecter nos options PSP
# STRATÉGIE: Collecter tous les args, puis injecter APRÈS -level (en fin de chaîne H.264)
ARGS=()
SKIP_NEXT=0
LAST_WAS_LEVEL=0

i=0
while [ $i -lt $# ]; do
    i=$((i + 1))
    arg="${!i}"
    
    # Skip les arguments que nous allons remplacer
    if [ $SKIP_NEXT -eq 1 ]; then
        echo "  [SKIP] $arg" >> "$LOGFILE"
        SKIP_NEXT=0
        continue
    fi
    
    # Supprimer les options conflictuelles de Jellyfin
    # NOTE: -x264opts peut être -x264opts:0, -x264opts:1, etc.
    # IMPORTANT: On supprime aussi -maxrate et -bufsize car le mode CBR crée des P-frames de 11 bytes !
    if [[ "$arg" =~ ^-(preset|crf|force_key_frames|maxrate|bufsize)$ ]] || [[ "$arg" =~ ^-x264opts ]]; then
        echo "  [REMOVE] $arg (remplacé par options PSP)" >> "$LOGFILE"
        SKIP_NEXT=1
        continue
    fi
    
    # REMPLACER -movflags par +faststart (moov au début pour streaming progressif)
    if [[ "$arg" = "-movflags" ]]; then
        i=$((i + 1))
        next_arg="${!i}"
        echo "  [REPLACE] -movflags $next_arg -> -movflags +faststart (moov en tête)" >> "$LOGFILE"
        ARGS+=("-movflags" "+faststart")
        continue
    fi
    
    # Détecter si l'argument précédent était "-level"
    if [ $LAST_WAS_LEVEL -eq 1 ]; then
        # Ajouter la valeur de level
        ARGS+=("$arg")
        
        # MAINTENANT injecter nos options PSP (après -profile et -level)
        echo "  [INJECT] Options PSP Baseline APRÈS -level $arg" >> "$LOGFILE"
        
        # Options PSP critiques pour Baseline Profile
        ARGS+=("-bf" "0")                    # Pas de B-frames
        ARGS+=("-refs" "1")                  # 1 seule référence
        ARGS+=("-coder" "0")                 # CAVLC (pas CABAC)
        ARGS+=("-g" "48")                    # GOP fixe 48 frames
        ARGS+=("-sc_threshold" "0")          # Pas de scene detection
        ARGS+=("-keyint_min" "48")           # Keyframe min = GOP
        ARGS+=("-partitions" "none")         # Désactiver partitions avancées
        ARGS+=("-me_method" "hex")           # Motion estimation simple
        ARGS+=("-subq" "2")                  # Subpel quality 2 (éviter P-frames vides)
        ARGS+=("-trellis" "0")               # Pas de trellis
        ARGS+=("-8x8dct" "0")                # Désactiver 8x8 DCT (Baseline)
        ARGS+=("-fast-pskip" "0")            # Désactiver fast-pskip (éviter P-frames de 11 bytes)
        ARGS+=("-wpredp" "0")                # Pas de weighted prediction
        ARGS+=("-mixed-refs" "0")            # Pas de mixed refs
        
        # Mode qualité CQP au lieu de CBR (éviter P-frames de 11 bytes)
        ARGS+=("-qp" "23")                   # Qualité fixe (remplace -b:v -maxrate -bufsize)
        
        LAST_WAS_LEVEL=0
        continue
    fi
    
    # Ajouter l'argument actuel
    ARGS+=("$arg")
    
    # Détecter "-level" pour injecter APRÈS sa valeur
    if [[ "$arg" =~ ^-level$ ]] || [[ "$arg" =~ ^-level:v ]]; then
        LAST_WAS_LEVEL=1
    else
        LAST_WAS_LEVEL=0
    fi
done

# Logger la commande modifiée
echo "COMMANDE MODIFIÉE (PSP Baseline):" >> "$LOGFILE"
printf '%s ' "${ARGS[@]}" >> "$LOGFILE"
echo "" >> "$LOGFILE"
echo "" >> "$LOGFILE"

# Exécuter FFmpeg avec les arguments modifiés
exec /usr/lib/jellyfin-ffmpeg/ffmpeg.original "${ARGS[@]}"
FFMPEG_WRAPPER

# Rendre le wrapper exécutable
chmod +x "$FFMPEG_WRAPPER"

echo "→ Wrapper FFmpeg installé ✅"
echo "→ Tous les transcodages H.264 utiliseront Baseline Profile !"
echo "==================================================="

